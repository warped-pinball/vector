name: Build and Deploy

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev/requirements.txt

      - name: Determine build environment and version
        id: determine_version
        run: |
          BASE_VERSION=$(grep WarpedVersion src/SharedState.py | awk -F'"' '{print $2}')

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            ENV="dev"
            SUFFIX="-dev${{ github.event.pull_request.number }}"
            VERSION="$BASE_VERSION$SUFFIX"
          elif [ "${{ github.event_name }}" = "push" ]; then
            ENV="beta"
            SUFFIX="-beta-${{ github.run_number }}"
            VERSION="$BASE_VERSION$SUFFIX"
          elif [ "${{ github.event_name }}" = "release" ]; then
            ENV="prod"
            VERSION="$BASE_VERSION"
          else
            ENV="dev"
            SUFFIX="-dev"
            VERSION="$BASE_VERSION$SUFFIX"
          fi

          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update SharedState.py Version
        run: |
          sed -i "s/WarpedVersion = .*/WarpedVersion = \"${{ env.VERSION }}\"/" src/SharedState.py
          git diff src/SharedState.py

      - name: Build project
        run: |
          python dev/build.py --build-dir build --env ${{ env.ENV }}

      - name: Create key files (if provided)
        run: |
          if [ -n "${{ secrets.WARPED_PINBALL_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.WARPED_PINBALL_PRIVATE_KEY }}" > private_key.pem
          else
            echo "No private key specified, building unsigned."
          fi

      - name: Generate update.json
        run: |
          if [ -f "private_key.pem" ]; then
            python dev/build_update.py \
              --build-dir build \
              --output update.json \
              --version "${{ env.VERSION }}" \
              --private-key private_key.pem
          else
            python dev/build_update.py \
              --build-dir build \
              --output update.json \
              --version "${{ env.VERSION }}"
          fi

      # Create (or update) a single pre-release for PRs, using the dev version as the tag_name.
      - name: Create or Update Pre-Release for Pull Request
        if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          body: |
            PR: ${{ github.event.pull_request.html_url }}
            Branch: ${{ github.event.pull_request.head.ref }}
            Version: ${{ env.VERSION }}
          prerelease: true
          files: "update.json"
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Only attach update.json to the official GitHub Release if it's a "published" release.
      - name: Upload artifact to GitHub Release
        uses: softprops/action-gh-release@v2
        if: ${{ github.event_name == 'release' }}
        with:
          files: update.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Always upload update.json as an artifact for debugging or future reference.
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: pico-update
          path: update.json
