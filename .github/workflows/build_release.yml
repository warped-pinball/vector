name: Build and Deploy

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        target_system: [sys11, wpc, em]
    outputs:
      version: ${{ steps.determine_version.outputs.version }}
      files: ${{ steps.collect_outputs.outputs.files }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev/requirements.txt

      - name: Determine build environment and version
        id: determine_version
        run: |
          BASE_VERSION=$(grep WarpedVersion src/common/SharedState.py | awk -F '"' '{print $2}')
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            SUFFIX="-dev${{ github.event.pull_request.number }}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            SUFFIX="-beta${{ github.run_number }}"
          else
            SUFFIX=""
          fi
          VERSION="$BASE_VERSION$SUFFIX"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update SharedState.py
        run: |
          sed -i "s/WarpedVersion = .*/WarpedVersion = \"${{ env.VERSION }}\"/" src/common/SharedState.py

      - name: Build and generate update file
        run: |
          python dev/build.py --build-dir build --target_system ${{ matrix.target_system }}
          rm -f private_key.pem
          if [ -n "${{ secrets.WARPED_PINBALL_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.WARPED_PINBALL_PRIVATE_KEY }}" > private_key.pem
            python dev/build_update.py \
              --build-dir build \
              --output update_${{ matrix.target_system }}.json \
              --version ${{ env.VERSION }} \
              --private-key private_key.pem
          else
            python dev/build_update.py \
              --build-dir build \
              --output update_${{ matrix.target_system }}.json \
              --version ${{ env.VERSION }}
          fi
          SHA=$(sha256sum update_${{ matrix.target_system }}.json | awk '{print $1}')
          echo "update_${{ matrix.target_system }}.json:$SHA" >> checksums.txt

      - name: Collect outputs
        id: collect_outputs
        run: |
          files=$(jq -R -s -c 'split("\n")[:-1]' checksums.txt)
          echo "files=$files" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: update_*.json
          overwrite: true
          if-no-files-found: warn

  publish-prerelease:
    needs: build
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Create or Update Pre-Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.version }}
          name: ${{ needs.build.outputs.version }}
          body: |
            PR: ${{ github.event.pull_request.html_url }}
            Branch: ${{ github.event.pull_request.head.ref }}
            Version: ${{ needs.build.outputs.version }}

            <!-- checksums:start -->
            ${{ needs.build.outputs.files }}
            <!-- checksums:end -->
          prerelease: true
          files: update_*.json
          fail_on_unmatched_files: false
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  annotate-release:
    needs: build
    if: ${{ github.event_name == 'release' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Append checksums to Release notes
        uses: actions/github-script@v6
        env:
          FILES: ${{ needs.build.outputs.files }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const files = process.env.FILES;
            const block = `<!-- checksums:start -->\n${files}\n<!-- checksums:end -->`;
            const release = context.payload.release;
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: `${release.body || ''}\n${block}`
            });
