name: Build and Deploy

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  release:
    types: [ published ]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    strategy:
      matrix:
        target_system: [ default, wpc, em ]
    env:
      # Map target_system to filenames
      OUTPUT_FILE: |
        update${{ matrix.target_system == 'default' && '' || '_' + matrix.target_system }}.json

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: python -m pip install --upgrade pip && pip install -r dev/requirements.txt

      - name: Determine version
        id: version
        run: |
          BASE=$(grep WarpedVersion src/SharedState.py | awk -F'"' '{print $2}')
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            VERSION="$BASE"
          else
            # fallback for PR/push
            VERSION="$BASE-dev"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update SharedState.py
        run: sed -i "s/WarpedVersion = .*/WarpedVersion = \"${{ env.VERSION }}\"/" src/SharedState.py

      - name: Build for ${{ matrix.target_system }}
        run: |
          python dev/build.py \
            --build-dir build \
            --env prod \
            --target_system "${{ matrix.target_system }}"

      - name: Generate update file
        run: |
          python dev/build_update.py \
            --build-dir build \
            --output "${{ env.OUTPUT_FILE }}" \
            --version "${{ env.VERSION }}" \
            --target_system "${{ matrix.target_system }}"

      - name: Compute checksum
        id: checksum
        run: |
          SHA256=$(sha256sum "${{ env.OUTPUT_FILE }}" | awk '{print $1}')
          echo "SHA256=${SHA256}" >> $GITHUB_OUTPUT
          echo "FILE=${{ env.OUTPUT_FILE }}" >> $GITHUB_OUTPUT

      - name: Upload to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: "${{ env.OUTPUT_FILE }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target_system }}
          path: "${{ env.OUTPUT_FILE }}"

  annotate-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Fetch checksum info
        run: echo "placeholder"
        # In real implementations, collect checksums via workflow outputs or artifact downloads

      - name: Append checksum section to release notes
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            // Simulated checksum data
            const checks = [
              { file: 'update.json', sha: 'abc123...' },
              { file: 'update_wpc.json', sha: 'def456...' },
              { file: 'update_em.json', sha: '789abc...' }
            ];
            let block = '\n<!-- checksums:start -->\n';
            checks.forEach(c => {
              block += `${c.file}: ${c.sha}\n`;
            });
            block += '<!-- checksums:end -->\n';
            const release = context.payload.release;
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: `${release.body || ''}${block}`
            });
