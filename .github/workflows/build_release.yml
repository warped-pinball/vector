name: Build and Deploy

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    strategy:
      matrix:
        target_system: [sys11, wpc, em]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev/requirements.txt

      - name: Determine build environment and version
        id: determine_version
        run: |
          BASE_VERSION=$(grep WarpedVersion src/common/SharedState.py | awk -F'"' '{print $2}')

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            ENV="dev"
            SUFFIX="-dev${{ github.event.pull_request.number }}"
            VERSION="$BASE_VERSION$SUFFIX"
          elif [ "${{ github.event_name }}" = "push" ]; then
            ENV="beta"
            SUFFIX="-beta${{ github.run_number }}"
            VERSION="$BASE_VERSION$SUFFIX"
          elif [ "${{ github.event_name }}" = "release" ]; then
            ENV="prod"
            VERSION="$BASE_VERSION"
          else
            ENV="dev"
            SUFFIX="-dev"
            VERSION="$BASE_VERSION$SUFFIX"
          fi

          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Write modified version back to SharedState.py
        run: |
          sed -i "s/WarpedVersion = .*/WarpedVersion = \"${{ env.VERSION }}\"/" src/common/SharedState.py
          git diff src/common/SharedState.py

      - name: Build project for ${{ matrix.target_system }}
        run: |
          python dev/build.py \
            --build-dir build \
            --env ${{ env.ENV }} \
            --target_system ${{ matrix.target_system }}

      - name: Create key files (if provided)
        run: |
          if [ -n "${{ secrets.WARPED_PINBALL_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.WARPED_PINBALL_PRIVATE_KEY }}" > private_key.pem
          else
            echo "No private key specified, building unsigned."
          fi

      - name: Determine output filename
        id: output
        run: |
          if [ "${{ matrix.target_system }}" = "sys11" ]; then
            echo "OUTPUT_FILE=update.json" >> $GITHUB_ENV
          else
            echo "OUTPUT_FILE=update_${{ matrix.target_system }}.json" >> $GITHUB_ENV
          fi

      - name: Generate update file
        run: |
          if [ -f "private_key.pem" ]; then
            python dev/build_update.py \
              --build-dir build \
              --output "${{ env.OUTPUT_FILE }}" \
              --version "${{ env.VERSION }}" \
              --private-key private_key.pem
          else
            python dev/build_update.py \
              --build-dir build \
              --output "${{ env.OUTPUT_FILE }}" \
              --version "${{ env.VERSION }}"
          fi

      - name: Compute checksum
        id: checksum
        run: |
          SHA256=$(sha256sum "${{ env.OUTPUT_FILE }}" | awk '{print $1}')
          echo "SHA256=$SHA256" >> $GITHUB_OUTPUT
          echo "FILENAME=${{ env.OUTPUT_FILE }}" >> $GITHUB_OUTPUT

      - name: Create or Update Pre-Release for Pull Request
        if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          body: |
            PR: ${{ github.event.pull_request.html_url }}
            Branch: ${{ github.event.pull_request.head.ref }}
            Version: ${{ env.VERSION }}
          prerelease: true
          files: "${{ env.OUTPUT_FILE }}"
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to official GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: "${{ env.OUTPUT_FILE }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.target_system }}"
          path: "${{ env.OUTPUT_FILE }}"

  annotate-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Compute checksums and prepare markdown
        run: |
          echo "<!-- checksums:start -->" > checksum_block.txt
          for file in *.json; do
            SHA=$(sha256sum "$file" | awk '{print $1}')
            echo "$file: $SHA" >> checksum_block.txt
          done
          echo "<!-- checksums:end -->" >> checksum_block.txt

      - name: Append checksums to release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const block = fs.readFileSync('checksum_block.txt', 'utf8');
            const release = context.payload.release;
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: `${release.body || ''}\n${block}`
            });
